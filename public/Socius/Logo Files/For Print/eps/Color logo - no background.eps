%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2437 2344
%%HiResBoundingBox: 0 0 2436.96 2343.1199
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2436.96 2343.1199 re
W
q
[0.24 0 0 -0.24 0 2343.1199] cm
q
0 0 10154.166 9760.4971 re
W*
q
[39.054485 0 0 39.054485 390.54486 390.54486] cm
/DeviceRGB {} CS
[0.0549 0.6902 0.6314] SC
/DeviceRGB {} cs
[0.0549 0.6902 0.6314] sc
5 65 m
120 0 l
235 65 l
120 10 l
5 65 l
h
5 150 m
120 230 l
235 145 l
120 220 l
5 150 l
h
f*
Q
q
[22.437691 0 0 22.437691 -330.69836 3770.2842] cm
/DeviceRGB {} CS
[0.0549 0.6902 0.6314] SC
/DeviceRGB {} cs
[0.0549 0.6902 0.6314] sc
52.094002 93.749001 m
52.095001 93.749001 63.202003 86.339005 52.977001 70.839996 c
48.204002 63.604996 40.381001 55.868996 41.276001 48.209999 c
40.261002 49.092999 39.339001 50.069 38.896 50.662998 c
37.278 52.831997 36.105 55.191998 35.504002 57.626999 c
34.807003 60.449997 34.989002 63.421997 36.606003 66.312996 c
38.107002 68.995995 40.713001 71.415993 43.164001 73.849998 c
49.032001 79.675995 54.200001 85.867996 52.625 92.457001 c
52.541 92.810997 52.5 93.477997 52.094002 93.749001 c
h
f
59.397999 79.139999 m
59.398998 79.139 77.233002 67.242996 60.814999 42.357998 c
53.152 30.742001 40.591999 18.320999 42.029999 6.024 c
40.664997 7.218 38.919998 9.009001 38.209 9.963 c
35.611 13.445001 33.728001 17.234001 32.763 21.144001 c
31.643 25.677002 31.936001 30.448002 34.533001 35.09 c
36.943001 39.397999 41.126999 43.283001 45.063 47.192001 c
54.484001 56.547001 62.781998 66.487 60.252998 77.068001 c
60.116001 77.635002 60.049 78.706001 59.397999 79.139999 c
h
f
Q
q
[68.934853 0 0 68.934853 1842.4419 3117.2673] cm
/DeviceRGB {} CS
[0.0549 0.6902 0.6314] SC
/DeviceRGB {} cs
[0.0549 0.6902 0.6314] sc
22.496 30.0756 m
22.49682 30.114857 22.495375 30.153919 22.493734 30.19208 c
22.492641 30.215399 22.494007 30.238447 22.492367 30.262039 c
22.491274 30.277157 22.489359 30.291962 22.488266 30.307079 c
22.485806 30.334267 l
22.073486 35.759468 17.508205 39.999065 12.058806 39.999065 c
6.292005 39.999065 1.599806 35.307064 1.599806 29.540066 c
1.599806 28.327267 2.583086 27.344067 3.795806 27.344067 c
5.008526 27.344067 5.991806 28.327347 5.991806 29.540066 c
5.991806 32.885265 8.713306 35.606865 12.058606 35.606865 c
14.917107 35.606865 17.350206 33.594166 17.967806 30.882866 c
10.505405 23.420465 l
9.647845 22.562906 9.647845 21.172466 10.505405 20.314865 c
11.363245 19.457306 12.753406 19.457306 13.611205 20.314865 c
21.854004 28.557665 l
21.870762 28.574423 21.884747 28.592274 21.900684 28.609304 c
21.927599 28.638132 21.954512 28.666689 21.979784 28.69688 c
22.003378 28.724888 22.025057 28.753445 22.047012 28.781996 c
22.068146 28.809731 22.089005 28.837463 22.108768 28.86602 c
22.130722 28.897856 22.151308 28.930241 22.171345 28.962896 c
22.188375 28.990631 22.205133 29.018641 22.221073 29.047192 c
22.239746 29.081215 22.257322 29.11524 22.27408 29.149811 c
22.288885 29.179733 22.303143 29.209927 22.316309 29.240671 c
22.330839 29.274422 22.344278 29.30817 22.356897 29.342192 c
22.369514 29.375942 22.381311 29.40942 22.392288 29.443712 c
22.402445 29.476368 22.411779 29.508753 22.420568 29.541679 c
22.43045 29.578203 22.439514 29.615 22.447483 29.65234 c
22.454359 29.684723 22.459866 29.717104 22.465374 29.749489 c
22.471703 29.787106 22.477484 29.824997 22.481857 29.863159 c
22.485685 29.89773 22.488146 29.932299 22.490334 29.966869 c
22.492794 30.002846 22.494982 30.038822 22.495529 30.075069 c
22.496 30.0756 l
h
1.6213 21.924 m
1.62048 21.885015 1.622159 21.84568 1.6238 21.80724 c
1.624894 21.78392 1.623527 21.760872 1.625167 21.73728 c
1.626261 21.722162 1.628175 21.707357 1.629269 21.69224 c
1.63173 21.665052 l
2.04405 16.239853 6.60933 12.000253 12.05873 12.000253 c
17.825531 12.000253 22.517731 16.692253 22.517731 22.459251 c
22.517731 23.67205 21.534451 24.655251 20.321732 24.655251 c
19.109013 24.655251 18.125732 23.67197 18.125732 22.459251 c
18.125732 19.114052 15.404232 16.392452 12.058932 16.392452 c
9.200432 16.392452 6.767332 18.405151 6.149732 21.116451 c
13.612132 28.578852 l
14.469692 29.436411 14.469692 30.826851 13.612132 31.684452 c
13.183332 32.113251 12.621412 32.327614 12.059232 32.327614 c
11.497051 32.327614 10.935132 32.113235 10.506331 31.684454 c
2.263532 23.441654 l
2.246774 23.424896 2.23279 23.407045 2.216852 23.390015 c
2.189938 23.361187 2.163024 23.33263 2.137752 23.302439 c
2.114158 23.274431 2.092479 23.245874 2.070524 23.217323 c
2.049391 23.189589 2.028532 23.161856 2.008768 23.133299 c
1.986815 23.101463 1.966228 23.069078 1.946191 23.036423 c
1.929161 23.008688 1.912403 22.980679 1.896464 22.952127 c
1.877791 22.918104 1.860214 22.884079 1.843456 22.849508 c
1.828651 22.819313 1.814667 22.789392 1.801228 22.758648 c
1.786697 22.725172 1.773259 22.691149 1.76064 22.657127 c
1.748023 22.623652 1.736226 22.590176 1.725249 22.555878 c
1.714819 22.523495 1.705483 22.490837 1.696694 22.457911 c
1.686811 22.421114 1.677749 22.38459 1.66978 22.34725 c
1.662904 22.314867 1.657397 22.282486 1.651888 22.250101 c
1.645561 22.212484 1.639779 22.174593 1.635404 22.136431 c
1.631576 22.10186 1.629115 22.067291 1.626928 22.032721 c
1.624467 21.996744 1.62228 21.960768 1.621733 21.92452 c
1.6213 21.924 l
h
34.478001 19.412001 m
40.1544 19.412001 44.771999 24.0296 44.771999 29.706001 c
44.771999 35.382401 40.1544 40 34.478001 40 c
28.801601 40 24.184002 35.382401 24.184002 29.706001 c
24.184002 24.029602 28.801601 19.412003 34.478001 19.412003 c
34.478001 19.412001 l
h
34.478001 35.608002 m
37.7323 35.608002 40.380001 32.960403 40.380001 29.706001 c
40.380001 26.451599 37.732399 23.804001 34.478001 23.804001 c
31.223602 23.804001 28.576 26.451601 28.576 29.706001 c
28.576 32.960403 31.2236 35.608002 34.478001 35.608002 c
h
60.916 33.8792 m
61.77356 33.021641 63.1642 33.021481 64.021797 33.879318 c
64.879639 34.736877 64.879639 36.127319 64.021797 36.984917 c
62.077496 38.929218 59.492596 39.999817 56.742596 39.999817 c
51.066196 39.999817 46.448597 35.382217 46.448597 29.705818 c
46.448597 24.029419 51.066196 19.411819 56.742596 19.411819 c
59.492397 19.411819 62.077396 20.48242 64.021393 22.427019 c
64.879234 23.284578 64.879234 24.675018 64.021393 25.532619 c
63.163834 26.390179 61.773392 26.390179 60.915794 25.532619 c
59.801292 24.41782 58.318993 23.80402 56.742596 23.80402 c
53.488297 23.80402 50.840595 26.45162 50.840595 29.70602 c
50.840595 32.960419 53.488197 35.608021 56.742596 35.608021 c
58.319096 35.608021 59.801197 34.994221 60.915794 33.879421 c
60.916 33.8792 l
h
68.547997 19.412001 m
69.760796 19.412001 70.743996 20.395281 70.743996 21.608002 c
70.743996 37.804001 l
70.743996 39.0168 69.760719 40 68.547997 40 c
67.335274 40 66.351997 39.01672 66.351997 37.804001 c
66.351997 21.608002 l
66.351997 20.395203 67.335274 19.412003 68.547997 19.412003 c
68.547997 19.412001 l
h
66.519402 15.036 m
66.464516 14.904241 66.423347 14.7642 66.395882 14.6242 c
66.365685 14.4842 66.351974 14.33869 66.351974 14.19596 c
66.351974 14.05323 66.365685 13.90772 66.395882 13.76772 c
66.42334 13.62772 66.464516 13.487721 66.519402 13.35596 c
66.574287 13.224199 66.642921 13.09518 66.722519 12.97713 c
66.802124 12.85635 66.892715 12.74381 66.994278 12.64225 c
67.09584 12.54069 67.208382 12.4501 67.329155 12.37049 c
67.447205 12.290882 67.576225 12.22225 67.707985 12.16737 c
67.839745 12.11249 67.979744 12.071314 68.119743 12.04385 c
68.833466 11.89834 69.591141 12.134438 70.101746 12.64229 c
70.200577 12.74385 70.293892 12.85639 70.373505 12.97717 c
70.45311 13.09522 70.521744 13.22424 70.576622 13.356 c
70.6315 13.48776 70.672676 13.62776 70.700142 13.76776 c
70.730339 13.907761 70.744049 14.05327 70.744049 14.196 c
70.744049 14.33873 70.730339 14.484241 70.700142 14.62424 c
70.672684 14.76424 70.631508 14.90424 70.576622 15.036 c
70.521736 15.167761 70.453102 15.296781 70.373505 15.41483 c
70.2939 15.53561 70.200577 15.64815 70.101746 15.74971 c
70.000183 15.85127 69.887642 15.94186 69.766869 16.021469 c
69.648819 16.101078 69.519798 16.169708 69.388039 16.224588 c
69.256279 16.279469 69.11628 16.320644 68.97628 16.348108 c
68.836281 16.378303 68.690773 16.392016 68.548042 16.392016 c
68.405312 16.392016 68.259804 16.378303 68.119804 16.348108 c
67.979805 16.320648 67.839806 16.279476 67.708046 16.224588 c
67.576286 16.169701 67.447266 16.101069 67.329216 16.021469 c
67.208435 15.941861 67.095894 15.851269 66.994339 15.749709 c
66.892784 15.648149 66.802193 15.535609 66.72258 15.414829 c
66.642975 15.29678 66.574341 15.167759 66.519463 15.035999 c
66.519402 15.036 l
h
90.848 19.412001 m
92.060799 19.412001 93.043999 20.395281 93.043999 21.608002 c
93.043999 29.706001 l
93.043999 35.382401 88.426399 40 82.75 40 c
77.073601 40 72.456001 35.382401 72.456001 29.706001 c
72.456001 21.608002 l
72.456001 20.395203 73.439278 19.412003 74.652 19.412003 c
75.864723 19.412003 76.848 20.395283 76.848 21.608002 c
76.848 29.706001 l
76.848 32.9603 79.495598 35.608002 82.75 35.608002 c
86.004402 35.608002 88.652 32.960403 88.652 29.706001 c
88.652 21.608002 l
88.652 20.395203 89.635277 19.412003 90.848 19.412003 c
90.848 19.412001 l
h
108.663002 27.51 m
112.1064 27.51 114.908203 30.3116 114.908203 33.755199 c
114.908203 37.198799 112.106606 40.000401 108.663002 40.000401 c
100.565002 40.000401 l
99.352203 40.000401 98.369003 39.01712 98.369003 37.804401 c
98.369003 36.591682 99.35228 35.608402 100.565002 35.608402 c
108.663002 35.608402 l
109.6847 35.608402 110.5159 34.777203 110.5159 33.755501 c
110.5159 32.733799 109.6847 31.902601 108.663002 31.902601 c
100.565002 31.902601 l
97.121605 31.902601 94.319801 29.101002 94.319801 25.657402 c
94.319801 22.213802 97.121399 19.412201 100.565002 19.412201 c
108.663002 19.412201 l
109.875801 19.412201 110.859001 20.395481 110.859001 21.6082 c
110.859001 22.820919 109.875725 23.804199 108.663002 23.804199 c
100.565002 23.804199 l
99.543304 23.804199 98.712105 24.635399 98.712105 25.657099 c
98.712105 26.678799 99.543304 27.509998 100.565002 27.509998 c
108.663002 27.509998 l
108.663002 27.51 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
